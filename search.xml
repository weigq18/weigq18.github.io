<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jenkins安装</title>
      <link href="/2020/02/09/jenkins-an-zhuang/"/>
      <url>/2020/02/09/jenkins-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins是一款开源 CI&amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。详细可以参考<a href="https://jenkins.io/zh/doc/" target="_blank" rel="noopener">这里</a>。</p><p><img src="1.jpg" alt="1"></p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>为了便于迁移，jenkins安装在docker中，但不是直接jenkins镜像安装，而是将jenkins构建在centos镜像中。</p><p>如下图</p><p><img src="2.png" alt="2"></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre><code># 安装依赖sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 添加docker下载仓库sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 安装docker-cesudo yum install docker-ce#换国内源vi /etc/docker/daemon.json{  "registry-mirrors": ["https://registry.docker-cn.com"]}# 启动docker-cesudo systemctl start docker# 验证sudo docker --version</code></pre><h3 id="安装docker-composer"><a href="#安装docker-composer" class="headerlink" title="安装docker-composer"></a>安装docker-composer</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>Compose 使用的三个步骤：</p><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ul><pre><code>sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composedocker-compose --version</code></pre><h3 id="制作centos自定义镜像"><a href="#制作centos自定义镜像" class="headerlink" title="制作centos自定义镜像"></a>制作centos自定义镜像</h3><p>编辑dockerfile,<code>vi dockerfile</code> 文件内容为：</p><pre><code>FROM centos:7ENV PATH="/opt/bin:${PATH}"RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN echo "Asia/Shanghai" &gt;&gt; /etc/timezone</code></pre><p>此镜像指定了centos7官方镜像，并指定的环境路径和时区为东八区</p><p>打包自定义镜像，将镜像名定为qt/centos7-cst-utf8</p><pre><code>#生成镜像docker build -t qt/centos7-cst-utf8 .#查看docker已安装的镜像docker images#删除镜像docker rmi hello-world</code></pre><h3 id="下载jenkins-war和jdk"><a href="#下载jenkins-war和jdk" class="headerlink" title="下载jenkins.war和jdk"></a>下载jenkins.war和jdk</h3><pre><code>#新建目录mkdir /home/jenkinscd /home/jenkins#下载jenkins.war和jdkwget http://ftp-chi.osuosl.org/pub/jenkins/war/2.219/jenkins.warwget https://download.oracle.com/otn/java/jdk/8u241-b07/1f5b5a70bf22433b84d0e960903adac8/jdk-8u241-linux-x64.tar.gz?AuthParam=1580906247_5e2e6badb6d413f9e1a577e1c635dda9</code></pre><p>下载jdk的时候AuthParam参数要重新去or</p><h3 id="docker-composer配置"><a href="#docker-composer配置" class="headerlink" title="docker-composer配置"></a>docker-composer配置</h3><p>编辑docker-compose.yml,<code>vi docker-compose.yml</code> 文件内容为：</p><pre><code>version: '3'services:  jenkins:    container_name: jenkins    #image: centos:7    image: qt/centos7-cst-utf8    restart: always    privileged: true    ports:      - "18080:8080"    volumes:      - /home/jenkins:/opt    environment:      JAVA_HOME: "/opt/jdk"      JAVA_OPTS: "-Duser.timezone=Asia/Shanghai"      JENKINS_HOME: "/opt/jenkins"    command:      "/opt/jdk/bin/java -jar /opt/jenkins.war"</code></pre><p>该配置指定了镜像的8080端口映射到宿主机的18080端口，宿主机的文件卷/home/jenkins映射到镜像的/opt目录中，并制定了jdk等环境变量，最重要的是这个JENKINS_HOME环境变量，这个是jenkins指定的运行文件保存目录，这样可以把实例从镜像中剥离出来，方便迁移。<code>"/opt/jdk/bin/java -jar /opt/jenkins.war"</code>在docker-composer启动容器加载镜像的时候，启动jenkins。</p><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><pre><code>#启动所有服务docker-compose up -d#启动jenkins服务docker-compose up -d jenkins#查看启动的服务docker-compose ps#停止jenkinsdocker-compose stop jenkins#进入实例docker-compose exec jenkins bash</code></pre><h2 id="jenkins配置使用"><a href="#jenkins配置使用" class="headerlink" title="jenkins配置使用"></a>jenkins配置使用</h2><p>第一次启动时会推荐安装各种插件，由于国内网络环境问题，很多插件会失败，可以插件管理中在切换国内的插件源</p><p><code>https://jenkins-zh.gitee.io/update-center-mirror/tsinghua/update-center.json</code></p><h3 id="挂载npm、yarn环境"><a href="#挂载npm、yarn环境" class="headerlink" title="挂载npm、yarn环境"></a>挂载npm、yarn环境</h3><p>到各自官网下载npm、yarn已编译好的程序</p><pre><code>cd /home/jenkinswget https://npm.taobao.org/mirrors/node/v12.14.1/node-v12.14.1-linux-x64.tar.xzwget https://github.com/yarnpkg/yarn/archive/v1.21.1.tar.gztar -xvf node-v12.14.1-linux-x64.tar.xztar -zxvf v1.21.1.tar.gz#创建软链ln -s /home/jenkins/jdk1.8.0_241 jdkln -s /home/jenkins/node-v12.14.1-linux-x64 nodeln -s /home/jenkins/yarn-1.21.1 yarn#进入dockercd /home/jenkinsdocker-compose exec jenkins bashmkdir /opt/bin#建立环境软链ln -s /opt/jdk/bin/java javaln -s /opt/node/bin/node nodeln -s /opt/node/bin/npm npmln -s /opt/yarn/bin/yarn yarn</code></pre><p>由于制作镜像时已经已经制定了 环境变量为 <code>PATH="/opt/bin:${PATH}"</code></p><p>所以在jenkins中构建shell脚本时，使用npm等统一的外挂程序，不会因为各个用户的npm版本不同，导致差异，一切以jenkins构建的版本为准。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>因为代码托管在gitee上，所以这里除了官方推荐的插件外， 需要额外安装gitee插件。</p><p>gitee插件的使用说明，可以参照<a href="https://gitee.com/oschina/Gitee-Jenkins-Plugin?_from=gitee_search" target="_blank" rel="noopener">这里</a></p><p>这里注意一点在新建任务的时候，凭据项应该选用的是 gitee账号或者ssh密钥，而不是gitee Api令牌</p><p><img src="3.png" alt="3"></p><h3 id="构建任务"><a href="#构建任务" class="headerlink" title="构建任务"></a>构建任务</h3><p>写不完了，to be continue………..</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章通达</title>
      <link href="/2020/01/05/wen-zhang-tong-da/"/>
      <url>/2020/01/05/wen-zhang-tong-da/</url>
      
        <content type="html"><![CDATA[<p>世事洞明皆学问,人情练达即文章</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 文章通达 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章通达 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
